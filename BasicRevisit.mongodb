// insertOne Example
use('sample_training');
db.employees.insertOne({
    "empId": 1,
    "empName": "John",
    "salary": 300000,
    "department": "DX" 
});

// insertMany Example
use('sample_training');
db.employees.insertMany([
    {"empId": 2, "empName":"Jack", "salary": 340000, "department": "ETA"},
    {"empId": 3, "empName": "Jill", "salary": 350000, 
    "department": "IVS"}
]);

use('sample_training');
db.employees.find({});

// Exercises
/**
1. Write a query to insert a single product as mentioned below into the Products collection */
use('sample_training');
db.products.insert({
    "productId": 1001,
    "productName": "iPhone 11 Pro",
    "productCategory": "Smartphones",
    "colors": ["silver", "black", "gold"],
    "productAvailability": 24
});

use('sample_training');
db.products.insertMany([
    {"productId":1002 , "productName": "Sony Bravia R202F", "productCategory": "Televisions", "size": ["32inch", "40inch", "55inch"], "productAvailability": 16},
    {"productId":1003 , "productName": " Self Design Men Round Neck Maroon T-Shirt", "productCategory": "Clothing", "fabric": "Cotton", "sleeve": "Full Sleeve", "productAvailability": 32},
    {"productId": 1004, "productName": "FLOWER Digital Reprint Painting", "productCategory": "Home Decor", "dimensions":"24 inch x 17 inch" , "frameColor":"black" , "productAvailability": 8}
]);

use('sample_training');
db.products.find({});

use('sample_training');
// Find all the employees in the employeeInfy collection
db.employeesInfy.find({});

use('sample_training');
// Find all the employess as per condition and projection
db.employeesInfy.find({"department": "ETA"});

// Fetch only employee names and department who are from "ETA" department
use('sample_training');
db.employeesInfy.find({"department": "ETA"}, {"empName": 1, "department": 1, "_id": 0});

// FindOne query
use('sample_training');
db.employeesInfy.findOne();

// Fetch the name and salary of employee with empId: 6
use('sample_training');
db.employeesInfy.find({"empId": 6}, {"empName": 1, "salary": 1, "_id": 0});

// Fetch the details of the employee who is allocated with mahcine having machine_id 1003
use('sample_training');
db.employeesInfy.find({"machineId": 1003});
// Find query returns array of objects and findOne only returns the object

// Fetch the employee details where machineId is 10
use('sample_training');
db.employeesInfy.find({"machineId": 10}); // []

use('sample_training');
db.employeesInfy.findOne({"machineId": 10}); // null

// Fetch the employees having salary > 30000
// Fetch the employees who are not from the ETA department
use('sample_training');
db.employeesInfy.find({"salary": {$gt: 30000}});

use('sample_training');
db.employeesInfy.find({"salary": {$gt: 40000}}, {"empId": 1, "salary":1, "_id":0});

use('sample_training');
db.employeesInfy.find({"department": {$ne: 'ETA'}}, {"empId": 1, "department": 1, "_id": 0});

// Fetch the documents where the employees are from department other than ETA and IVS
use('sample_training');
db.employeesInfy.find({"department": {$nin: ["ETA", "IVS"]}}, {"empId": 1, "department": 1, "_id": 0});
// Fetch the documents where the employees are from department  ETA and IVS
use('sample_training');
db.employeesInfy.find({"department": {$in: ["ETA", "IVS"]}}, {"empId": 1, "department": 1, "_id": 0});
// Removes the key where the department field is not present
use('sample_training');
db.employeesInfy.find({"department": {$exists: true, $nin: ["ETA", "IVS"]}}, {"empId": 1, "department": 1, "_id": 0});

// $size operator - To find the number of elements in the mongodb documents
// Find the documents where the employees have worked in 2 different roles
use('sample_training');
db.employeesInfy.find({"experience": {$size: 2}}, {"empName":1, "experience": 1, "_id": 0});

// $regex operator
// Fetch all the employee doucments where empName starts with "J"
use('sample_training');
db.employeesInfy.find({"empName": {$regex: /^J+/}}, {"empName":1, "_id": 0});

// To perform case insensitive search using regex
use('sample_training');
db.employeesInfy.find({"empName": {$regex: /^J+/, $options: "i"}}, {"empName":1, "_id": 0});

// Fetch the employees where empName starts with A or E
use('sample_training');
db.employeesInfy.find({"empName": {$in: [/^A+/i,/^E+/i]}},  {"empName":1, "_id": 0});

// Fetch the employee details from ETA or IVS department and salary > 30000
use('sample_training');
db.employeesInfy.find({$and: [{"department": {$in: ["ETA", "IVS"]}}, {"salary": {$gt: 30000}}]}, {"_id": 0, "department": 1, "salary": 1});

// Fetch the employee details from ETA or IVS department or salary > 30000
use('sample_training');
db.employeesInfy.find({$or: [{"department": {$in: ["ETA", "IVS"]}}, {"salary": {$gt: 30000}}]}, {"_id": 0, "department": 1, "salary": 1});


// Fetch the employee documents where the machineId is not greater than 1002
use('sample_training');
/**
Returns the documents where either machineId is not present or if it is present it is less than or equal to 1002 */
db.employeesInfy.find({
    "machineId": {$not: {$gt: 1002}}
},
{"_id": 0, "empName": 1, "machineId": 1});


/**
Returns the documents where either machineId has value less than or equal to 1002 */
use('sample_training');
db.employeesInfy.find({
    "machineId": {$lte: 1002}
}, {"_id": 0, "empName": 1, "machineId": 1});

// Array Operators
/**
$elemMatch- returns the documents having an array field with at least one element matching all the criteria specified specified with $elemMatch operator. */
// Example - Fetch only employees who have been in the Technology Lead role for more than 1 year
use('sample_training');
db.employeesInfy.find({
    "experience": {
        $elemMatch: {
            "role": "Technology Lead",
            "roleExperience": {$gt: 1.0}
            }
        }
    }
);

/**
$all - matches the documents having field value as an array that contains all the values specified with $all operator */
// Example- Fetch only the employees who have been in
// Technology Analyst role for less than 1 year
// Senior Systems Engineer for more than 1.5 years
use('sample_training');
db.employeesInfy.find({
    "experience": {
        $all: [
            {
                $elemMatch: {
                    "role": "Technology Analyst",
                    "roleExperience": {$lt: 1.0}
                }
            },
            {
                $elemMatch: {
                    "role": "Senior Systems Engineer",
                    "roleExperience": {$gt: 1.5}
                }
            }
        ]
    }
});

// Using top level operator $and to
use('sample_training');
db.employeesInfy.find({
    $and: [
        {
            "experience": {
                $elemMatch: {
                    role: "Technology Analyst",
                    roleExperience: {$lt: 1.0}
                }
            }
        },
        {
            "experience": {
                $elemMatch: {
                    role: "Senior Systems Engineer",
                    roleExperience: {$gt: 1.5}
                }
            }
        }
    ]
});

use('exercise_db');
db.products.insertMany([
    {
        "productId": "P1001",
        "productName": "iPhone 11 pro",
        "productBrand": "Apple",
        "battery": 3500,
        "productCategory": {
            "main": "electronics",
            "sub": "mobiles"
        },
        "productSellers": [
            "Flashstar Commerce",
            "SuperComNet",
            "MobilePlannet"
        ],
        "productPrice": [
            {
                "color": "gold",
                "priceArray": [
                    {
                        "128GB": {
                            "price": 99900,
                            "productAvailability": 10
                        },
                        "64GB": {
                            "price": 113900,
                            "productAvailability": 5
                        }
                    }
                ]
            },
            {
                "color": "black",
                "priceArray": [
                    {
                        "128GB": {
                            "price": 97900,
                            "productAvailability": 3
                        },
                        "64GB": {
                            "price": 110900,
                            "productAvailability": 14
                        }
                    }
                ]
            },
            {
                "color": "midnightGreen",
                "priceArray": [
                    {
                        "128GB": {
                            "price": 101900,
                            "productAvailability": 7
                        },
                        "64GB": {
                            "price": 117900,
                            "productAvailability": 11
                        }
                    }
                ]
            }
        ]
    },
    {
        "productId": "P1002",
        "productName": "Vivo U10",
        "productBrand": "Vivo",
        "battery": 5000,
        "productCategory": {
            "main": "electronics",
            "sub": "mobiles"
        },
        "productSellers": [
            "SuperComNet",
            "Flashtech Retail",
            "Appario Retail"
        ],
        "productPrice": [
            {
                "color": "electricblue",
                "priceArray": [
                    {
                        "32GB": {
                            "price": 8990,
                            "productAvailability": 20
                        },
                        "64GB": {
                            "price": 9990,
                            "productAvailability": 13
                        }
                    }
                ]
            },
            {
                "color": "black",
                "priceArray": [
                    {
                        "32GB": {
                            "price": 97900,
                            "productAvailability": 3
                        },
                        "64GB": {
                            "price": 110900,
                            "productAvailability": 14
                        }
                    }
                ]
            },
            {
                "color": "midnightGreen",
                "priceArray": [
                    {
                        "64GB": {
                            "price": 117900,
                            "productAvailability": 11
                        }
                    }
                ]
            }
        ]
    },
    {
        "productId": "P1003",
        "productName": "OPPO Reno 2",
        "productBrand": "Dell",
        "battery": 4500,
        "productCategory": {
            "main": "electronics",
            "sub": "mobiles"
        },
        "productSellers": [
            "Flashtech Retail",
            "Truenet Commerce",
            "Appario Retail"
        ],
        "productPrice": [
            {
                "oceanblue": [
                    {
                        "128GB": {
                            "price": 33990,
                            "productAvailability": 10
                        }
                    }
                ],
                "black": [
                    {
                        "128GB": {
                            "price": 97900,
                            "productAvailability": 3
                        },
                        "256GB": {
                            "price": 110900,
                            "productAvailability": 14
                        }
                    }
                ],
                "midnightGreen": [
                    {
                        "256GB": {
                            "price": 117900,
                            "productAvailability": 11
                        }
                    }
                ]
            }
        ]
    },
    {
        "productId": "P1004",
        "productName": "Asus VivoBook S430FA-EB039T",
        "productBrand": "Asus",
        "battery": {
            "backup": "6 Hours",
            "cells": 3
        },
        "productProcessor": {
            "name": "Core i5",
            "generation": "8th Gen"
        },
        "productCategory": {
            "main": "electronics",
            "sub": "laptop"
        },
        "productSellers": [
            "Flashtech Retail"
        ],
        "operatingSystem": {
            "Architecture": "64Bit",
            "OSName": "Windows 10 Home"
        },
        "productPrice": [
            {
                "oceanblue": [
                    {
                        "14inch": {
                            "price": 48990,
                            "productAvailability": 10
                        }
                    }
                ],
                "black": [
                    {
                        "14inch": {
                            "price": 49900,
                            "productAvailability": 3
                        },
                        "15inch": {
                            "price": 50900,
                            "productAvailability": 14
                        }
                    }
                ],
                "midnightGreen": [
                    {
                        "15inch": {
                            "price": 52900,
                            "productAvailability": 14
                        }
                    }
                ]
            }
        ]
    },
    {
        "productId": "P1005",
        "productName": "HP Pavilion Gaming Laptop",
        "productBrand": "HP",
        "battery": {
            "backup": "8 Hours",
            "cells": 3
        },
        "productProcessor": {
            "name": "Core i5",
            "generation": "8th Gen"
        },
        "productCategory": {
            "main": "electronics",
            "sub": "laptop"
        },
        "productSellers": [
            "Flashtech Retail",
            "Appario Retail"
        ],
        "operatingSystem": {
            "Architecture": "64Bit",
            "OSName": "Windows 10 Home"
        },
        "productPrice": [
            {
                "lightgrey": [
                    {
                        "14inch": {
                            "price": 52990,
                            "productAvailability": 3
                        }
                    }
                ],
                "black": [
                    {
                        "14inch": {
                            "price": 47990,
                            "productAvailability": 7
                        },
                        "15inch": {
                            "price": 53990,
                            "productAvailability": 16
                        }
                    }
                ]
            }
        ]
    },
    {
        "productId": "P1006",
        "productName": "Apple MacBook Air",
        "productBrand": "Apple",
        "battery": {
            "backup": "12 Hours",
            "cells": 3
        },
        "productProcessor": {
            "name": "Core i5",
            "generation": "5th Gen"
        },
        "productCategory": {
            "main": "electronics",
            "sub": "laptop"
        },
        "productSellers": [
            "Truenet Commerce",
            "Appario Retail",
            "SuperComNet"
        ],
        "operatingSystem": {
            "Architecture": "64Bit",
            "OSName": "Windows 10 Home"
        },
        "productPrice": [
            {
                "silver": [
                    {
                        "13inch": {
                            "price": 64990,
                            "productAvailability": 13
                        }
                    }
                ],
                "black": [
                    {
                        "13inch": {
                            "price": 67990,
                            "productAvailability": 7
                        }
                    }
                ],
                "gold": [
                    {
                        "13inch": {
                            "price": 62990,
                            "productAvailability": 16
                        }
                    }
                ]
            }
        ]
    },
    {
        "productId": "P1007",
        "productName": "Nilkamal Fern Dining Set",
        "productBrand": "Nilkamal",
        "productCategory": {
            "main": "Home and Furnitures",
            "sub": "Dinning Set"
        },
        "productSellers": [
            "athome by Nilkamal",
            "OmniTechRetail"
        ],
        "productPrice": [
            {
                "wood": [
                    {
                        "4seater": {
                            "price": 22090,
                            "productAvailability": 5
                        },
                        "6seater": {
                            "price": 25090,
                            "productAvailability": 0
                        }
                    }
                ],
                "metal": [
                    {
                        "4seater": {
                            "price": 32090,
                            "productAvailability": 8
                        },
                        "6seater": {
                            "price": 35090,
                            "productAvailability": 12
                        }
                    }
                ]
            }
        ]
    },
    {
        "productId": "P1008",
        "productName": "RoyalOak Rover Dining Set",
        "productBrand": "RoyalOak",
        "productCategory": {
            "main": "Home and Furnitures",
            "sub": "Dinning Set"
        },
        "productSellers": [
            "SMHOMEGALLERY",
            "NationalFurnitures"
        ],
        "productPrice": [
            {
                "wood": [
                    {
                        "8seater": {
                            "price": 33250,
                            "productAvailability": 7
                        },
                        "6seater": {
                            "price": 34545,
                            "productAvailability": 2
                        }
                    }
                ],
                "metal": [
                    {
                        "4seater": {
                            "price": 39990,
                            "productAvailability": 4
                        },
                        "6seater": {
                            "price": 41499,
                            "productAvailability": 15
                        }
                    }
                ]
            }
        ]
    },
    {
        "productId": "P1009",
        "productName": "FUNTERIOR Leatherette Natural Sofa Set",
        "productBrand": "FUNTERIOR",
        "productCategory": {
            "main": "Home and Furnitures",
            "sub": "Sofa"
        },
        "productSellers": [
            "Funterior",
            "SMHOMEGALLERY"
        ],
        "productPrice": [
            {
                "wood": [
                    {
                        "4seater": {
                            "price": 61996,
                            "productAvailability": 12
                        },
                        "6seater": {
                            "price": 68750,
                            "productAvailability": 0
                        }
                    }
                ],
                "woadwithfoam": [
                    {
                        "4seater": {
                            "price": 79990,
                            "productAvailability": 12
                        },
                        "6seater": {
                            "price": 81499,
                            "productAvailability": 9
                        }
                    }
                ]
            }
        ]
    },
    {
        "productId": "P1010",
        "productName": "Voltas 1.5 ton AC",
        "productBrand": "Voltas",
        "productCategory": {
            "main": "Electronics",
            "sub": "Air Conditioners"
        },
        "productSellers": [
            "Appario Retail",
            "Flashstar Commerce"
        ],
        "productPrice": [
            {
                "inverter": [
                    {
                        "1ton": {
                            "price": 34999,
                            "productAvailability": 21
                        },
                        "2ton": {
                            "price": 36750,
                            "productAvailability": 13
                        }
                    }
                ],
                "fixedspeed": [
                    {
                        "2ton": {
                            "price": 29450,
                            "productAvailability": 5
                        },
                        "3ton": {
                            "price": 31325,
                            "productAvailability": 2
                        }
                    }
                ]
            }
        ]
    },
    {
        "productId": "P1011",
        "productName": "Whirlpool AC",
        "productBrand": "Whirlpool",
        "productCategory": {
            "main": "Electronics",
            "sub": "Air Conditioners"
        },
        "productSellers": [
            "OmniTechRetail",
            "SMHOMEGALLERY"
        ],
        "productPrice": [
            {
                "inverter": [
                    {
                        "1ton": {
                            "price": 34999,
                            "productAvailability": 21
                        },
                        "2ton": {
                            "price": 37750,
                            "productAvailability": 13
                        }
                    }
                ],
                "tripleinverter": [
                    {
                        "2ton": {
                            "price": 42450,
                            "productAvailability": 5
                        },
                        "3ton": {
                            "price": 44325,
                            "productAvailability": 2
                        }
                    }
                ]
            }
        ]
    }
]);
// Exercises
// Find Operation Basic
// 1. Write a query to fetch all the products in shoppers.com inventory
use('exercise_db');
db.products.find({});

// 2. Write a query to fetch all the details of products under the category Mobiles
use('exercise_db');
db.products.find({
    "productCategory.sub": "mobiles"
});

// 3. Write a query to display all the details of product with productId P1001
use('exercise_db');
db.products.find({
    "productId": "P1001"
}, 
{"_id": 0, "productName": 1});

// 4. Write a query to display the name of all the laptops
use('exercise_db');
db.products.find({
    "productCategory.sub": "laptop"
},
{"_id": 0, "productName": 1});

// 5. Write a query to fetch all Home and Furnitures products.
use('exercise_db');
db.products.find({
    "productCategory.main": "Home and Furnitures"
});

// 6. Write a query to fetch all products sold by Voltas
use('exercise_db');
db.products.find({
    "productBrand": "Voltas"
});

// 7. Write a query to display battery details of HP Pavilion Gaming Laptop
use('exercise_db');
db.products.find({
  "productName": "HP Pavilion Gaming Laptop"  
},{"_id": 0, "battery": 1});


// 8. Write a query to display the laptops with 3 battery cells
use('exercise_db');
db.products.find({
    "productCategory.sub": "laptop",
    "battery.cells": 3
});

// 9. Write a query to fetch the price and availability of 3 ton fixed speed Voltas AC
use('exercise_db');
db.products.find(
    {"productBrand": "Voltas"},
    {"_id": 0, "productPrice.fixedspeed.3ton": 1}
);

// 10. Write a query to display the mobiles with battery capacity under 5000
use('exercise_db');
db.products.find({"productCategory.sub":"mobiles",battery: {$lt: 5000}},{productCategory:1,battery:1});

// Find Operations with Comparison and logical operators
// 1. Write a query to display all the products sold by two sellers.
use('exercise_db');
db.products.find(
    {"productSellers": {$size: 2}}
);

// 2. Write a query to display all the mobiles to the users with battery capacity as 4000mAh or more.
use('exercise_db');
db.products.find({"productCategory.sub": "mobiles",
"battery": {$gte: 4000}});

// 3. Write a query to display the name of all the products sold by a seller.
use('exercise_db');
db.products.find(
    {"productSellers": {$size: 1}},
    {"_id": 0, "productName": 1}
);

// 4. Write a query to display only the name of all the mobiles sold by SuperComNet
use('exercise_db');
db.products.find(
    {
        "productCategory.sub": "mobiles",
        "productSellers": "SuperComNet"
    }
);

// 5. Write a query to fetch price of iphone 11 pro with specifications:-  any variant of green color and 128GB hard disk.
use('exercise_db');
db.products.find({
    "productName": "iPhone 11 pro",
    "productPrice": {
        "$elemMatch": {
            "color": {$regex: /.*green.*/, "$options": "i"}
        }
    }
}, {"productPrice.priceArray.128GB.price.$":1,"_id": 0});

// 6.  Write a query to display all the mobiles available with 32 GB Hard Disk in any color
use('exercise_db');
db.products.find({
    "productCategory.sub": "mobiles",
    "productPrice.priceArray.32GB": {$exists: true}
});

// 7. Write a query to fetch all the products under mobiles category . Perform case insensitive search.
use('exercise_db');
db.products.find({
    "productCategory.sub": {$regex: /.*mobiles.*/, $options: "i"}
});
// 8. Write a query to fetch all the products under mobiles and Air Conditioners category. perform case insensitive search.
use('exercise_db');
db.products.find({
    "productCategory.sub": {
            $in : [/.*mobiles.*/i, /.*air.*/i]
    }
});
//9 . Write a query to fetch the price and availability of 6 seater wooden RoyalOak Rover Dining Set 
use('exercise_db');
db.products.find({
    "productName": "RoyalOak Rover Dining Set",
    "productPrice.wood.6seater": {$exists: true} 
}, {_id: 0, "productName": 1, "productPrice.wood.6seater.$":1});

//10.  Write a query to identify all the products sold by the seller SMHOMEGALLERY
use('exercise_db');
db.products.find({
    "productSellers": "SMHOMEGALLERY"
});



// Update queries
use('sample_training');
db.employees.find({});

// UpdateOne
// Update the salary of empId 6 to 42000
use('sample_training');
db.employees.updateOne(
    {"empId": 6},
    {$set: {"salary": 42000}}
);

use('sample_training');
db.employees.find({"empId": 6});

// UpdateMany
// Update the salary of department ETA to 41000
use('sample_training');
db.employees.find({"department": "ETA"
});

use('sample_training');
db.employees.updateMany(
    {"department": "ETA"},
    {"$set": {"salary": 41000}}
);

// Update
// Update salary of empId 6 to 42000 (using update as updateOne)
use('sample_training');
db.employees.find({"empId": 6});

use('sample_training');
db.employees.update(
    {"empId": 6},
    {"$set": {"salary": 42000}}
);

// Update the salary of all employees from ETA Department to 41000(using update as updateMany)
use('sample_training');
db.employee.update({“department”:"ETA"}, {$set: {salary:40000}},{$multi:true});

/*
Field Update Operator:
$set, $inc, $mul, $max, $min, $unset
$set - Sets the value of a field document
$inc - Increments the value of the field by a specified amount
$mul - Multiplies the value of the field by the specified amount
$max - Only updates the field if the specified value is less than the existing field value.
$min - Only updates the field if the specified value is greater than the existing field value.
$unset - Removes the specified field of a document.
*/
// Example 1: To increase the salary of all employees from ETA department by 2000
use('sample_training');
db.employees.updateMany(
    {"department": "ETA"},
    {"$inc": {"salary": 2000}}
);

// Find the updated records
use('sample_training');
db.employees.find({
    "department": "ETA"
});


// Example 2: To decrease the salary of all employees from ETA department by 2000
use('sample_training');
db.employees.updateMany(
    {"department": "ETA"},
    {"$inc": {"salary": -2000}}
);

// Find the updated records
use('sample_training');
db.employees.find({"department": "ETA"});

// Example 3: To increase the salary of all employees from ETA department by 10%
use('sample_training');
db.employees.updateMany(
    {"department": "ETA"},
    {"$mul": {"salary": 1.1}}
);

// Find all the updated records
use('sample_training');
db.employees.find({"department":"ETA"});

// Example 4: To decrease the salary of all employees from ETA department by 10%
use('sample_training');
db.employees.updateMany(
    {"department": "ETA"},
    {"$mul": {"salary": 0.9}}
);

// Find all the updated records
use('sample_training');
db.employees.find({"department": "ETA"});

// Example 5: To set the salary as 30000 if the current salary is less than 30000
// Find all the employees less than 30000
use('sample_training');
db.employees.find(
    {"salary": {"$lte": 30000}}
);
// 2 records updated
use('sample_training');
db.employees.updateMany(
    {},
    {"$max": {"salary": 30000}}
);

// Example 6: To set the salary as 50000 if the current salary of the employee is greater than 50000
// Find all the employees greater than 50000
use('sample_training');
db.employees.find(
    {"salary": {"$gte": 50000}}
);
// 2 records updated
use('sample_training');
db.employees.updateMany(
    {},
    {"$min": {"salary": 50000}}
);

// Example 7: To remove selected fields from a document i.e. Remove department and machineId fields for empId 1
use('sample_training');
db.employees.updateOne(
    {"empId": 1},
    {"$unset": {
        "department": "",
        "machineId": ""
    }}
);

/*
upsert: true
Adds a new field if there is no existing fields in the collection    
*/
// Example: Update the salary of all the employees in department A to 40000. If no employee found for update, add a new record.
use('sample_training');
db.employees.updateMany({"department": "A"}, {$set: {"salary":40000}},{upsert: true});
// Earlier -No Records, After update records addedd
use('sample_training');
db.employees.find({"department": "A"});


/*
Array Update Operators
$push - It is used to add new values inside an array. It does not check whether the value is already present inside 
the array and adds duplicate values also
$addToSet - It is used to add new values inside an array but unlike $push it does not add duplicate values into the array
$each - Operator is used along with $push and $addToSet operators to add multiple values to an array field. When used with $addToSet, it will not
add duplicate values.
$position - Using $push, $addToSet and $each we can add the values only at the last index of existing array. $position operator helps 
us to add the values at our desired index in the array.
$pull - used to remove a single value from an array field.
$pullAll - used to remove multiple values from an array field.
$pop - used to remove one element at a time from the array field either from first and last position(-1|1)
*/
// Example 1 - Add Role Senior Systems Engineer and roleExperience 0.1 into an experience array for empId: 14
use('sample_training');
db.employees.find({"empId": 13});

use('sample_training');
db.employees.updateOne(
    {"empId": 14},
    {
        "$push": {
            "experience": {
                "role": "Senior Systems Engineer",
                "roleExperience": 0.1
            }
        }
    }
);

// Example 2: Add role Senior Systems Engineer and roleExperience 0.1 into an experience array for empId 14 only if it is 
// already not added.
// Here below query does not add anything.
use('sample_training');
db.employees.updateOne(
    {"empId": 14},
    {
        "$addToSet": {
            "experience": {
                "role": "Senior Systems Engineer",
                "roleExperience": 0.1
            }
        }
    }
);

// Example 3: Add 2 roles Technology Analyst (1.2 years) and Technology Lead(1.0 year) for empId 14
use('sample_training');
db.employees.updateOne(
    {"empId": 14},
    {
        "$push": {
            "experience": {
                "$each": [
                    {
                        "role": "Technology Analyst",
                        "roleExperience": 1.2
                    },
                    {
                        "role": "Technology Lead",
                        "roleExperience": 1.0
                    }
                ]
            }
        }
    }
);

// Example 4: Add the role Systems Engineer Trainee with roleExperience 0.4 years at index 0 for empId 14
use('sample_training');
db.employees.update(
    {"empId": 14},
    {"$push": {
        "experience": {
            "$each": [
                {
                    "role": "Systems Engineer Trainee",
                    "roleExperience": 0.4
                }
            ],
            "$position": 0
        }
    }}
);

// Example 5: Remove the role Systems Engineer Trainee with roleExperience 0.4 years for empId 14
use('sample_training');
db.employees.updateOne(
    {"empId": 14},
    {"$pull": {
        "experience": {
            "role": "Systems Engineer Trainee",
            "roleExperience": 0.4
        }
    }}
);

// Example 6: Remove the roles System Engineer (1.7 years) and Senior Systems Engineer(1.8 years) for empId 13
use('sample_training');
db.employees.updateOne(
    {"empId": 13},
    {
        "$pullAll": {
            "experience": [
                {
                    "role": "Systems Engineer",
                    "roleExperience": 1.7
                },
                {
                    "role": "Senior Systems Engineer",
                    "roleExperience": 1.8
                }
            ]
        }
    }
);

//Example: Remove System Engineers Role of empId 1
use('sample_training');
db.employees.updateOne({empId: 1}, {$pop: {$experience: -1}});
use('sample_training');
db.employees.updateOne( {empId:1}, {$pop:{experience: 1}} );